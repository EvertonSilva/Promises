/*
 * Copyright (C) 2012 Google Inc. All rights reserved.
 */

//
// Design Notes
// ============
//
//  TODOs:
//
//    * Working polyfill based on RSVP.js
//    * Define callback interface between Resolver and Future
//    * Determine how we're going to plan for "Future" type sniffing in an
//      future where the language provides Future/Resolver types natively.  One
//      option is to assume that the "then" method will be provided by the root
//      of the type hierarchy and it we will re-define DOM's Future/Resolver
//      types as subclasses.
//    * Should "Future" and "Resolver" be named "DOMFuture" and "DOMResolver"?
//    * Provide examples of progress event subclassing
//    * Provide examples of compatiblity shims for use with existing libraries
//    * Finish example code
//
//  Goals:
//
//    This design for a DOM-compatible Future (nee, "Promise") type aims to be
//    usable in the majority of the web's single-response asynchronous APIs,
//    either directly or through subclass (e.g., to add progress notification).
//
//    It also aims to enable end-users (non-spec authors) to build systems
//    using these types directly without appealing to libraries or DOM magic
//    for creating/resolving Futures.
//
//    We identify the following features as required:
//
//      * Chaining of .then() calls
//      * Separation of Resolver (who may vend Futures) and Future
//        implementation, creating the ability for a Resolver to safely hand a
//        Future to multiple clients whom it does not trust and may not
//        interfere with each other.
//      * Event-friendlyness. As this is a DOM API, it must be possible to
//        register callbacks using the DOM's event mechanism.
//
//    The final goal is to define a future-compatible superset of the Future
//    design space to allow both subclassing by DOM API designers who need
//    additional features (e.g., a "progress" event) and eventual subsetting by
//    TC39 for adding Futures to the language directly.
//
//  Non-Goals:
//
//    Unifying or describing the internal behavior of events is a non-goal.
//    Futures are a single-request/single-repose formalism and may capture
//    values from past resposes. Events, on the other hand, describe a series
//    of future events.  They cover separate use-cases and we do not seek to
//    join them here in any way other than to provide a way for receivers of a
//    Future to receive eventual notification of resolution via event handler.
//
//    Compatibility with existing promises/futures/deferreds libraries or
//    terminology is a non-goal. Where adopting existing terminology improves
//    the usability of this design, we will. Otherwise, appeals to
//    compatibility with published libraries, specifications, and practice are
//    not compelling. So far, this is compatible with the
//    Promises/A+ spec, although largely by accident and in part because it
//    leaves core compatibility points (such as defining what it means to be a
//    testable "Promise" type in return handling) undefined:
//
//      https://github.com/promises-aplus/promises-spec
//
//  Basic API:
//
//    DOM Futures represent the completion of a single operation, past or
//    future, and provide a uniform API for interacting with individual events,
//    chains of events, and error handling for those events.
//
//    Futures are bound to Resolvers and created as properties of Resolver
//    instances. To create a new Future, you create a resolver and extract the
//    future from it:
//
//      var r = new Resolver();
//      var f = r.future;
//
//    Futures provide a way for others to be notified when the resolution
//    occurs without handing them the ability to resolve the future itself.
//    This is accomplished either by providing callbacks to the ".then()"
//    method or by adding event handlers.
//
//  Processing model:
//
//    The delivery of any resolution or error MUST BE "apparently
//    asynchronous", specifically they must be delayed at least to the "end of
//    microtask" as defined for the delivery of Mutation Observer and
//    Object.observe() notifications. Delivery at any point beyond that, e.g.
//    in the next turn or microtask, is allowed, but all implementations MUST
//    demonstrate the following behavior:
//
//      var r = new Resolver();
//      assertTrue(r.state == "pending");
//      assertTrue(r.future.state == "pending");
//
//      r.accept(null);
//      assertTrue(r.state == "accepted");
//      assertTrue(r.future.state == "pending");
//
//      try {
//        r.accept(null);
//        // Not reached
//        assertTrue(false);
//      } catch(e) {
//        // Catch the AlreadyResolved error thrown by the second accept()
//        assertTrue(e instanceof AlreadyResolved);
//      }
//
//  Chaining:
//
//    Chaining is a requirement, meaning that it must be possible to call
//    ".then()" and receive a sensible result from which you can ".then()"
//    again.
//
//    This is accomplished in the design below through the setting of an
//    internal resolver reference in the Future implementation, either through
//    the constructor argument or some other mechanism.
//
//    Futures return a new automatically-generated Future from each "then()"
//    call. The then()-generated Futures are resolved by the callbacks passed
//    to each "then()" invocation. These functions are called based on the
//    resolution and their return values are passed onward to the next
//    auto-generated Future:
//
//      // Example invocation
//      var doItAsync = function() {
//        var r = new Resolver();
//        // ...
//        return r.future;
//      };
//      doItAsync()
//          .then(onaccept, onreject)
//          .then(onacceptIntermediate)
//          .done(onacceptFinal);
//
//    This architecture gaurantees that resolution goes through a Resolver,
//    meaning that the ability to resolve is not leaked by default (see below).
//
//    In a change from most Futures implementations, we automatically pass the
//    generated resolver to callbacks, allowing them to use/return its future
//    directly, a feature which isn't available through the return-sniffing
//    system:
//
//      doItAsync()
//          .then(function onaccept(value, nextResolver) {
//            // To chain async behavior, we simply operate with the passed
//            // resolver...
//            setTimeout(nextResolver.accept.bind(nextResolver, "accepted!"), 100);
//
//            // ...and return its future
//            return nextResolver.future;
//          })
//          .done();
//
//    Chaining fast-forwards un-handled values to the next item in the chain
//    which registers a handler for that particular disposition (accept &
//    reject). As in RSVP.js, the "onerror" function passed to done() is called
//    here, logging the exception:
//
//      doItAsync()
//          .then(function(){ throw new Error("spurious!"); })
//          .then(onaccept) // "onaccept" is not called, and we fast-forward
//          .done(null, console.error.bind(console));
//
//    If the second call were to handle "error", the final callback would not
//    receive an "error" unless it also rejected its Future. e.g.:
//
//      doItAsync()
//          .then(function(){ throw new Error("spurious!"); })
//          .then(onaccept, console.error.bind(console)) // logs the error
//          .done(null, console.error.bind(console));    // does nothing
//
//  Return Value Sniffing and value/error Chaining:
//
//    Like many other Future systems, the callbacks for accept & error
//    are used to resolve the auto-generated Future returned from a call to
//    then(). Below is the basic logic for then() callback return handling.
//    Major features:
//
//      * If the return is a Future, merge the generated Future's behavior
//        with it.
//      * If the callback throws, reject() the generated future with the thrown
//        value, even if the value is not an Error.
//      * If the return value is any other kind, use it as the "value" for
//        resolving the generated Future.
//
//      e.g.:
//
//      Future.prototype.then = function(onaccept, onerror) {
//
//        var nextResolver = new Resolver();
//
//        // _onResolution is only for illustration
//        this._onResolution(function(value) {
//          var ret;
//          try {
//            ret = onaccept(value, nextResolver);
//          } catch (e) {
//            nextResolver.reject(e);
//            return nextResolver.future;
//          }
//
//          if (ret instanceof Future) {
//            if (ret !== nextResovler.future)
//              // Merge the resolution of nextResolver with the returned
//              // Future;
//              ret.then(nextResolver.accept.bind(nextResolver),
//                       nextResolver.reject.bind(nextResolver));
//            }
//          } else {
//            nextResolver.accept(ret);
//          }
//        });
//
//        // error and cancellation handling omitted for space
//
//        return nextResolver.future;
//      };
//
//  Delivery order:
//
//    1.) then() callbacks in the order of registration
//    2.) dispatchEvent() handlers
//
//
//  Cancelation and Timeouts:
//
//    A resolver's cancel() and timeout() methods are conveniences which de-
//    sugar to:
//
//      Resolver.prototype.cancel = function() {
//        // NOTE: DOMError() isn't currently new-able thanks to IDL-based lack
//        // of construbtability, so the below is explanatory but not runnable
//        // until that's fixed in the spec. *Le sigh*.
//        var e = new DOMError();
//        e.name = "Cancel";
//        this.reject(e);
//       };
//
//      Resolver.prototype.timeout = function() {
//        var e = new DOMError();
//        e.name = "Timeout";
//        this.reject(e);
//       };
//
//    To handle cancelation and timeouts, the rejection handler of a Future
//    should detect these types by their "name" field:
//
//      f.then(onaccept, function(e) {
//        switch (e.name) {
//          "Cancel":  showCancledMessage(); break;
//          "Timeout": showTimeoutMessage(); break;
//          default:
//            // Some other type of rejection, perhaps an unhandled low-level
//            // exception.
//            ...
//            break;
//        };
//        releaseUIResources();
//      });
//
//  Mutual suspicion:
//
//    Futures abstract (partially or fully) over the following capabilties:
//
//      * The ability to resolve the future
//      * The ability to register to be notified of the resolution
//
//    As with all systems that try to enforce mutual suspicion under the roof
//    of a single heap, designing to vend these capabilities via object
//    identity ("OCAP") is deeply fraught and when relied on in lieu of the
//    clunkier token-based capabilties systems, systems become predictably
//    brittle. Security boundaries remain difficult to reason about as *any*
//    function boundary may have equally large (and catastrophic) security
//    implications. Throwing the "this is a security-sensitive API!" flag is
//    much harder to do in the API design phase when simple value passing and
//    return are hijacked to perhaps mean "capability leaking".
//
//    Despite the risks in OCAP, we expect that DOM Futures will be used with
//    Structured Clone and will be "sendable", so it make sense to treat the
//    Resolver/Future reference relationship as something that can be split by
//    a (hidden) protocol. As a result, we park *all* sensitive capabilities
//    related to a Future in the Resolver that creates it.
//
//      ///////////////////////////////////////////////////////////////////////
//      // firstparty.js
//      ///////////////////////////////////////////////////////////////////////
//      // Vending a future to multiple users does not leak capabilities
//      function doWorkAsync() {
//        var r = new Resolver();
//        // ...
//        return r.future;
//      }
//
//      function doWorkAsyncAndLog() {
//        // As a first party, register to know about what happens.
//        var f = doWorkAsync();
//
//        // If we want to expose the results of logging, we could
//        // instead do:
//        //   return f.then(logIt, logIt);
//        // But this example shows a single Future vended to multiple users.
//        f.done(logIt, logIt);
//
//        return f;
//      }
//
//
//      ///////////////////////////////////////////////////////////////////////
//      // thirdparty.js
//      ///////////////////////////////////////////////////////////////////////
//      // A third party should not be able to observe previously
//      // registered handlers, remove them, or affect resolution.

//      doWorkAsyncAndLog().then(secondHandler, secondErrorHandler);
//      // Note that from the returned future, we cannot cancel or in any other
//      // way resolve, only add handlers to react to the eventual disposition
//      // of the Future
//
//  Errors and Exceptions:
//
//    As seen in the example code above, exceptions throw by callback handlers
//    are caught by the system. This leads to some particular debugging hazards
//    which other systems have treated in various ways. Some have opted simply
//    not to swallow errors. Some propigate errors in various ways (this design
//    employs a variant of that approach).
//
//    What is clear is that no matter what approach is pursued, integration
//    with developer tooling is key. Developer consoles SHOULD log un-caught
//    errors from future chains. That is to say, if future.done(onresponse); is
//    the only handler given for a resolver which is eventually rejected,
//    developer tools should log the unhandled error.
//
//  Example use:
//

module events {
  // Futures begin in the "pending" state and progress to other
  // states. Once moved from the "pending" state, they may never be
  // returned to it.
  enum FutureState {
    "pending",
    "accepted",
    "rejected"
  };

  // FIXME(slightlyoff):
  //      * Should the Resolver parameter to the ctor be mdandatory here?
  //      * Should this have a constructor? What does it mean to be able to
  //        new up a Future? Does passing the resolver connect them? How? It's
  //        not a leak of resolution capability if multiple promises are
  //        resolved by the same Resolver, but the order needs to be settled.
  [Constructor(Resolver resolver)]
  interface Future : EventTarget {
    // Events

    // To notify observers we use the following DOM events which can be
    // registered through the usual mechanism:
    //
    //   accept
    //     Bubbles: No
    //     Cancelable: No
    //     Context Info: value
    //
    //   reject
    //     Bubbles: No
    //     Cancelable: No
    //     Context Info: error
    //
    // Each of these events may be dispatched *only once*

    // markm points out that we need to be able to distinuish between all
    // available states:
    //
    //   pending       (value == null && error == null)
    //   accepted      (value != null)
    //   rejected      (value == null && error != null)

    attribute readonly any         value;
    attribute readonly any         error;
    attribute readonly boolean     rejected;
    attribute readonly FutureState state;

    // Returns a Future whose completion value will be the return value
    // from whichever of the callbacks is eventually invoked.
    Future  then(optional EventHandler onaccept,
                 optional EventHandler onreject);

    void    done(optional EventHandler onaccept,
                 optional EventHandler onreject);
  };

  // FIXME(slightlyoff):
  //      * Allow an optional value/error param for automatic resoluton, i.e.
  //        MSFT's "as"? Or allow an "init" function as in MSFT's Promise
  //        library?
  [Constructor]
  interface Resolver {

    // "accept" and "reject" may be called *only once*, after
    // which point they throw exceptions.
    void accept(optional any value) raises(Error); // AlreadyResolved
    void reject(optional any error) raises(Error); // AlreadyResolved
    void cancel()                   raises(Error); // AlreadyResolved
    void timeout()                  raises(Error); // AlreadyResolved

    attribute readonly FutureState state;
    attribute [readonly] Future future;
  };
};
